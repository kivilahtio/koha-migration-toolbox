package MMT::PrettyLib2Koha::Fee;

use MMT::Pragmas;

#External modules

#Local modules
my $log = Log::Log4perl->get_logger(__PACKAGE__);

#Inheritance
use MMT::KohaObject;
use base qw(MMT::KohaObject);

#Exceptions
use MMT::Exception::Delete;

=head1 NAME

MMT::PrettyLib2Koha::Fee - Fees to Fines

=cut

=head2 build

 @param1 PrettyLib data object
 @param2 Builder

=cut

sub build($self, $o, $b) {
  #$self->setAccountlines_id    ($o, $b); #AUTO_INCREMENT
  $self->set(Id_Customer => 'borrowernumber', $o, $b);
  $self->set(Id_Title    => 'biblionumber',   $o, $b);
  $self->set(Id_Item     => 'itemnumber',     $o, $b);
  $self->set(DueDate     => 'date',           $o, $b);
  $self->set(Fee         => 'amount',         $o, $b);
  $self->set(['Fee','PayDate'] => 'amountoutstanding', $o, $b);
  $self->setDescription         ($o, $b);
  $self->setAccounttype         ($o, $b);

  #$self->setIssue_id           ($o, $b); #Fines are not linked to issues in PrettyLib
  #$self->setAccountno          ($o, $b); #Internally generated by C4::Accounts::getnextacctno
  #$self->setTimestamp          ($o, $b); #Populated ON UPDATE
  #$self->setNotify_id          ($o, $b); #Koha generates it from accounttype in C4::Accounts::manualinvoice
  #$self->setNotify_level       ($o, $b);
  #$self->setDispute            ($o, $b);
  #$self->setLastincrement      ($o, $b);
  #$self->setNote               ($o, $b);
  #$self->setManager_id         ($o, $b);
}

sub id {
  return ('p:'.($_[0]->{borrowernumber} || 'NULL').'-i:'.($_[0]->{itemnumber} || 'NULL'));
}

sub logId($s) {
  return 'Fine: '.$s->id();
}

sub setBorrowernumber($s, $o, $b) {
  MMT::Exception::Delete->throw("No borrowernumber! Won't migrate fines for nobody.") unless $o->{Id_Customer};
  $s->{borrowernumber} = $o->{Id_Customer};
}
sub setBiblionumber($s, $o, $b) {
  #There might not be a biblionumber, and it is important to keep biblionumber undefined, so it NULLs in Koha, otherwise it trigger foreign-key constraint issues with a value of ''
  $s->{biblionumber} = $o->{Id_Title} if $o->{Id_Title};
}
sub setItemnumber($s, $o, $b) {
  #There might not be an item_id, and it is important to keep itemnumber undefined, so it NULLs in Koha, otherwise it trigger foreign-key constraint issues with a value of ''
  $s->{itemnumber} = $o->{Id_Item} if $o->{Id_Item};
}
sub setDate($s, $o, $b) {
  $s->{date} = $o->{DueDate};

  unless ($s->{date}) {
    $log->warn($s->logId()." has no DueDate|date.");
  }
}
sub setAmount($s, $o, $b) {
  unless (defined($o->{Fee})) {
    $log->warn($s->logId()." is missing Fee");
    return;
  }
  unless ($o->{Fee}) {
    $log->warn($s->logId()." has Fee='".$o->{Fee}."'. There should be no zero-value fines?");
    return;
  }
  $s->{amount} = $o->{Fee};
}
sub setAmountoutstanding($s, $o, $b) {
  if ($o->{PayDate}) { #Actually the Id_Customer is removed from the Fee-row when the fine is paid??
    $s->{amountoutstanding} = 0;
    $s->{timestamp} = $o->{PayDate};
  }
  else {
    $s->{amountoutstanding} = $o->{Fee} if $o->{Fee};
  }
}
sub setDescription($s, $o, $b) {
  $s->{description} = "Vanha maksu PrettyLib:stÃ¤. ".
  join(', ',
    grep {$_}
    (
      (($s->{itemnumber}) ? "Nidenumerosta:'".$s->{itemnumber}."'" : undef),
      (($s->{biblionumber}) ? "Teoksesta:'".$s->{biblionumber}."'" : undef)
    )
  );
}
sub setAccounttype($s, $o, $b) {
  $s->{accounttype} = 'F'; # For values in Koha, see. https://wiki.koha-community.org/wiki/Hard_Coded_Values
}

return 1;
