---

##
## IN THIS FILE
##
## The main configurations for MMT Voyager
##
##
## Configurations are introduced in the same order as they are needed by the migration tools

# From which system are we migrating from?
# One of ['Voyager', 'PrettyLib', 'PrettyCirc']
sourceSystemType: 'Voyager'

############################
### 1) Data export phase ###
## Voyager DB dumps are fetched and delivered for the data transformation phase

# Name of the script in directory $MMT_HOME/secret used to extract data from the VoyagerDB-server into the Koha-server.
# See the extractor-dir for example implementations.
exportPipelineScript: 'voyagerToTransformer.sh'

####################################
### 2) Data transformation phase ###
## Exported DB rows are mangled into Koha-objects

# Anonymize Borrower records?
anonymize: 1

# Enable multithreading by defining workers.
workers: 0

# Load ssns to Hetula instead of storing them in Koha as plain text.
# Boolean value
useHetula: false

# Holdings transformation strategy to use.
# The way holdings records are used in various databases vary, hence one transformation set of rules wont work for all source databases.
holdingsTransformationModule: HAMK

# If the item doesn't have a price or a replacementprice, use this default.
# Use '' (empty String) to skip setting the default replacement price
defaultReplacementPrice: 25

# ISIL-code for the migrated organization
# Used primarily in the MARC record transformations.
organizationISILCode: FI-Hamk

# Set the Patron home library to this value for all patrons. Leave empty to use the LocationId-translation table.
patronHomeLibrary:

# How many expiry years to add for patron account if expiry date is not defined in Voyager
patronAddExpiryYears: 0

# Which strategy to use to validate phone numbers
# See MMT::Validator::Phone for available strategies
phoneNumberValidationStrategy: HAMK

# How to deal with missing barcodes?
# ERROR: Barcodes must exist, mocks a barcode based on the Id
# IGNORE: Barcodes might be missing
# CREATE: Barcodes must exist. Creates a barcode using the pattern 'emptyBarcodePattern'
emptyBarcodePolicy: IGNORE

# Replaces zeroes (0) with the id of the object being transformed
emptyBarcodePattern: HAMK00000000

# Minimum length for a barcode.
# If barcode doesn't fit here, a new barcode is generated.
# TODO: Voyager support
barcodeMinLength: 5

# How Perl's Text::CSV should handle .csv-files input?
# Output is hard-coded and should not be changed to maintain zero-configuration compatibility with the Loader-modules
csvInputParams:
  new:
    binary: 1
    sep_char: ","
    auto_diag: 9
    always_quote: 1
  header:
    detect_bom: 1
    munge_column_names: none


# Relative path to USEMARCON INI file in $MMT_CODE/usemarcon directory. Leave empty if you want to skip usemarcon execution.
# Example: USEMARCON-fi2ma/fi2ma.ini
usemarconIniFile: ''

############ PRETTY* -specific configs ################

# Instead of the Item.BarCode use Item.AcqNumIdx to populate koha.items.barcode
pl_barcodeFromAcqNumber: 0

# Use these regexps to classify PrettyLib/Circ.Class-table's ClassText-column to different ontologies.
# if one of the regexp matches, the classification is put to the given MARC21 field with the extra static subfield contents
pl_class_classifiers:
  - regexp: ".*"
    field: 084
    indicator1: '#'
    indicator2: '#'
    subfields:
      - q: FI-Hamk

# Drop all Item Shelf (itemcallunmber) values that match this filter.
pl_shelf_filter: "(?:nu|es|ki)"

#############################
### 3) Data loading phase ###
## Exported DB rows are mangled into Koha-objects

# Name of the script in directory $MMT_HOME/secret used to import the transformed data into Koha
# See the importer-dir for example implementations.
importPipelineScript: 'transformerToKoha.sh'
